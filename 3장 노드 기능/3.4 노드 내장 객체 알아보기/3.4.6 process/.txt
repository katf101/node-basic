3.4.6.1 process.env

REPL에 process.env를 입력하면 매우 많은 정보가 출력됩니다. 
자세히 보면 이 정보들이 시스템의 환경 변수임을 알 수 있습니다. 
시스템 환경 변수는 노드에 직접 영향을 미치기도 합니다. 
대표적인 것으로 UV_THREADPOOL_SIZE와 NODE_OPTIONS가 있습니다.

NODE_OPTIONS=--max-old-space-size=8192
UV_THREADPOOL_SIZE=8

왼쪽이 환경 변수의 이름이고 오른쪽이 값입니다. 
NODE_OPTIONS는 노드를 실행할 때의 옵션들을 입력받는 환경 변수입니다.
 --max-old-space-size=8192는 노드의 메모리를 8GB까지 사용할 수 있게 합니다.
옵션이 다양하게 존재하므로 3.9절에 NODE_OPTIONS에 대한 링크를 적어두었습니다. 
UV_THREADPOOL_SIZE는 노드에서 기본적으로 사용하는 스레드풀의 스레드 개수를 
조절할 수 있게 합니다. 3.6.4절에서 자세히 알아봅니다.

시스템 환경 변수 외에도 여러분이 임의로 환경 변수를 저장할 수 있습니다. 
process.env는 서비스의 중요한 키를 저장하는 공간으로도 사용됩니다. 
서버나 데이터베이스의 비밀번호와 각종 API 키를 코드에 직접 입력하는 것은 위험합니다. 
혹여 서비스가 해킹을 당해 코드가 유출되었을 때는 비밀번호가 코드에 남아 있어 추가 피해가 발생할 수 있습니다.

따라서 중요한 비밀번호는 다음과 같이 process.env의 속성으로 대체합니다.

const secretId = process.env.SECRET_ID;
const secretCode = process.env.SECRET_CODE;
이제 process.env에 직접 SECRET_ID와 SECRET_CODE를 넣으면 됩니다. 넣는 방법은 운영체제마다 차이가 있습니다. 
하지만 한 번에 모든 운영체제에 동일하게 넣을 수 있는 방법이 있습니다. 
6.2절에서 dotenv를 사용할 때 배웁니다.

########################################################################

> process.version
'v16.14.2' // 설치된 노드의 버전입니다

> process.arch
'x64' // 프로세서 아키텍처 정보입니다. arm, ia32 등의 값일 수도 있습니다.

> process.platform
'win32' // 운영체제 플랫폼 정보입니다. linux나 darwin, freebsd등의 값일 수도 있습니다.

> process.pid
2064 // 현재 프로세스의 아이디입니다. 프로세스를 여러 개 가질 때 구분할 수 있습니다.

> process.uptime()
61.5147626 // 프로세스가 시작된 후 흐른 시간입니다. 단위는 초입니다.

> process.execPath
'C:\\Program Files\\nodejs\\node.exe' // 노드의 경로입니다.

> process.cwd() // 현재 프로세스가 실행되는 위치입니다.
'C:\\Code_Box\\NodeStudy\\3장 노드 기능\\3.4 노드 내장 객체 알아보기\\3.4.6 process'       

> process.cpuUsage()
{ user: 187000, system: 109000 } // 현재 cpu 사용량입니다.