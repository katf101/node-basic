// 노드에서는 예외 처리가 정말 중요합니다.
// 예외란 보통 처리하지 못한 에러를 가리킵니다.
// 이러한 예외들은 실행 중인 노드 프로세스를 멈추게 만듭니다.

// 멀티 스레드 프로그램에서는 스레드 하나가 멈추면
// 그 일을 다른 스레드가 대신합니다.
// 하지만 노드의 메인 스레드는 하나뿐이므로
// 그 하나를 소중히 보호해야 합니다.
// 메인 스레드가 에러로 인해 멈춘다는 것은
// 스레드를 갖고 있는 프로세스가 멈춘다는 뜻이고,
// 전체 서버도 멈춘다는 뜻과 같습니다.
// 아무리 신중을 기해 만들었다고 해도
// 항상 예기치 못한 에러는 발생하는 법입니다.

// 따라서 에러를 처리하는 방법을 익혀두어야 합니다.
// 에러 로그가 기록되더라도 작업은 계속 진행될 수 있도록 말입니다.

// 문법상의 에러는 없다고 가정하겠습니다.
// 실제 배포용 코드에 문법 에러가 있어서는 안 됩니다.
// 좋은 에디터를 사용하거나 좋은 문법 검사 툴을 사용해서
// 오타나 문법 에러가 발생하지 않도록 합니다.

// 다음 예제에서는 프로세스가 멈추지 않도록 에러를 잡아보겠습니다.
// 에러가 발생할 것 같은 부분을 try/catch문으로 감싸면 됩니다.

setInterval(() => {
  console.log("시작");
  try {
    throw new Error("서버를 고장내주마!");
  } catch (err) {
    console.error(err);
  }
}, 1000);

// setInterval을 사용한 것은 프로세스가 멈추는지 여부를 체크하기 위해서입니다.
// 프로세스가 에러로 인해 멈추면 setInterval도 멈출 것입니다.
// setInterval 내부에 throw new Error()를 써서 에러를 강제로 발생시켰습니다.

// 에러는 발생하지만 try/catch로 잡을 수 있고
// setInterval도 직접 멈추기 전(Ctrl+C)까지 계속 실행됩니다.
// 이렇게 에러가 발생할 것 같은 부분을 미리 try/catch로 감싸면 됩니다.
